/*//?----------  CLEARFIX  ----------*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

@keyframes btnFlash {
  0% {
    opacity: 0.5;
    transform: scale(1); }
  100% {
    opacity: 0;
    transform: scale(1.3); } }

/*//* select all pseudo-elements as well '::after' '::before'*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /*//* all selectors now inherit 'box-sizing: border-box' from 'body' */
  box-sizing: inherit; }

html {
  /*//* want this at '10px' for easy rem calculations, however shouldn't hard-code b/c would override user's browser settings.  standard setting is 16px.  10/16 = 0.625 */
  font-size: 62.5%; }

body {
  padding: 3rem;
  box-sizing: border-box; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777; }

/*//?----------  HEADER  ----------*/
.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /*//* hack to fix any odd shakiness in animation of element, not really needed here */
  backface-visibility: hidden;
  margin-bottom: 6rem; }

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /*//* a negative 'margin-right' counteracts the 'letter-spacing' of the last character, which throws off its centering */
  margin-right: -3.5rem;
  /*//* 'animation-fill-mode: backwards' uses animation's starting values during the delay period (keeps element hidden / opacity at 0 before animation starts) */
  animation: moveInLeft 1000ms 200ms backwards; }

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  margin-right: -1.75rem;
  animation: moveInRight 1000ms 900ms backwards; }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /*//* use 'bg-clip: text' to use the text as a clip-path for the 'bg-image' gradient, and must make the text transparent then to see it */
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: .2rem;
  transition: all .2s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(5deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

/*//* any inline-block elements that sit within a parent having this class will be centered within that parent */
.u-center-text {
  text-align: center; }

/*//* basic utility to add 'margin-bottom', versus adding property into existing class(es).  not sure i agree with this method */
.u-margin-bottom-8 {
  margin-bottom: 8rem; }

/*//?----------  HERO BUTTON  ----------*/
.btn:link, .btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  /*//* make 'block' or 'inline-block' for box-model props such as padding / margin / etc */
  display: inline-block;
  /*//* a very high 'bd-radius' number will simply round off the sides */
  border-radius: 10rem;
  /*//* 'transition' prop has to be on the 'initial state' or property */
  /*//* simply list 'all' properties instead of each individually (animate anything that changes) */
  transition: all 200ms;
  position: relative;
  font-size: 1.6rem; }

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--animated-rise {
  animation: moveInBottom 1000ms 2000ms backwards; }

.btn--white {
  background-color: #fff;
  color: #777;
  /*//?----------  HERO BUTTON FLASHY ANIMATION  ----------*/
  /*//* the "::after" pseudo-element basically adds a 'virtual-element' after the original element, which we can then style and animate */ }
  .btn--white::after {
    background-color: #fff;
    /*//* always have to include some content, often it's an empty string */
    content: "";
    display: inline-block;
    /*//* height and width are matching the original or parent element with the '&' class */
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /*//* position exactly where parent is, but behind it */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1; }
  .btn--white:hover::after {
    animation: btnFlash 400ms; }

.row {
  max-width: 114rem;
  /*//* auto center the '.row' block elements */
  margin: 0 auto;
  /*//* all rows will include columns that are floated, which therefore need to be cleared */
  /*//* ATTRIBUTE SELECTOR!!!! */
  /*//* select all elements with a class of "col-..." */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class*="col-"] {
    float: left; }
    .row [class*="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    /*//* in Sass calc() must include variables in a '' syntax */
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - (2 * 6rem)) / 3); }
  .row .col-2-of-3 {
    width: calc(2 * ((100% - (2 * 6rem)) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - (3 * 6rem)) / 4); }
  .row .col-2-of-4 {
    width: calc(2 * ((100% - (3 * 6rem)) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc(3 * ((100% - (3 * 6rem)) / 4) + (2 * 6rem)); }

.header {
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /*//* don't forget to include 'background-size: cover' */
  background-size: cover;
  /*//* 'bg-pos: top' ensures the top of the image is the stationary point as the screen size changes (the bottom and sides will adjust instead)...or use 'center' */
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem; }

.header__logo {
  height: 3.5rem; }

.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /*//* centers all elements within the container */
  text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  /*//* must vertically extend the bg-color into the clipped zone of the Header above (which is pure white).  The '.header' class is '95vh', then minus the '75vh' of the 'clip-path' property equals '20vh'.  Make it negative to extend upwards into the '<header>' element */
  margin-top: -20vh; }
