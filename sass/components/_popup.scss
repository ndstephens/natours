.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 2000;
  background-color: rgba($color-black, 0.8);

  opacity: 0;
  visibility: hidden;
  transition: all 0.5s;

  /*//* example of 'graceful degradation' by adding backdrop blur for Safari which currently supports it, but is ignored by other browsers */
  @supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    background-color: rgba($color-black, 0.3);
  }

  /*//* this element also has the id of 'popup'.  the 'Book Now' buttons on the 3 tour cards have an href of '#popup', so when they're clicked this element is the target.  so we can use the pseudo-class of ':target' to control this element when it's active target of a button click. when it's no longer the target (using a button to close it and activate another target ie '#section-tours' then it'll go back to its initial state */
  &:target {
    opacity: 1;
    visibility: visible;

    & .popup__content {
      transform: translate(-50%, -50%) scale(1);
      opacity: 1;
    }
  }

  &__close {
    &:link,
    &:visited {
      color: $text-grey-dark;
      position: absolute;
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      line-height: 1;
      transition: color 0.2s;
    }
    &:hover {
      color: $color-primary;
    }
  }

  &__content {
    @include pos-abs-center;
    width: 75%;
    // height: 60%;
    background-color: $color-white;
    border-radius: $border-radius * 2;
    /*//* interesting technique of using a parent table with two children table-cells.  then can use 'vertical-align: middle' to on a cell in relation to the other cell.  would probably used flexbox or grid in the future */
    display: table;

    /*//* the images were overlapping the border-radius, so need 'overflow: hidden' */
    overflow: hidden;

    /*//* starts out small and hidden so it grows when displayed with the ':target' pseudo class above ('transform' is already used above in the mixin, so using it again with only 'scale' would overwrite 'translate' used in the mixin, so it needs to be included here as well)  ALSO, order matters.  'scale' needs to be second or it doesn't scale from the center */
    transform: translate(-50%, -50%) scale(0.2);
    opacity: 0;
    /*//* add a short delay (0.2s) so that the screen starts going dark first (from the parent element '.popup' transition) before the content element ('.popup__content') begins its transition effect */
    transition: all 0.5s 0.2s;

    @include mq-tab-port {
      display: block;
      max-height: 95vh;
      overflow: scroll;
    }
    @include mq-phone {
      width: 90%;
      max-height: 95vh;
      overflow: scroll;
    }
  }

  &__left {
    width: 33.333333%;
    display: table-cell;

    @include mq-tab-port {
      display: block;
      width: calc(100% - 10rem);
      // padding: 3rem 5rem 0;
      margin: 3rem 5rem 0;
      text-align: center;
    }
    @include mq-phone {
      display: none;
    }
  }

  &__right {
    width: 66.666667%;
    display: table-cell;
    vertical-align: middle;
    padding: 3rem 5rem;

    @include mq-tab-port {
      width: auto;
      display: block;
      & .btn.btn--green {
        display: table;
        margin: 0 auto;
      }
    }
    @include mq-phone {
      & .heading-secondary {
        display: none;
      }
    }
  }

  &__img {
    display: block;
    width: 100%;

    @include mq-tab-port {
      &:first-of-type {
        display: none;
      }
    }
  }

  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;

    /*//* really cool new CSS feature, put text into columns */
    column-count: 2;
    column-gap: 4rem;
    column-rule: 1px solid $color-grey-light-2;
    /*//* add hyphens to wrapped text */
    hyphens: auto;

    @include mq-phone {
      column-count: 1;
    }
  }
}
